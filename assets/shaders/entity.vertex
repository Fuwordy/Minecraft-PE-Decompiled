#version 100
uniform MAT4 WORLDVIEWPROJ;
uniform MAT4 WORLD;
uniform vec3 TILE_LIGHT_COLOR;
uniform vec4 OVERLAY_COLOR;
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;

attribute mediump vec4 POSITION;
attribute vec2 TEXCOORD_0;
attribute vec4 NORMAL;

#ifdef COLOR_BASED
	attribute vec4 COLOR;
#endif

varying vec2 uv;
varying vec4 light;
varying vec4 fogColor;

#ifdef USE_OVERLAY
varying vec4 overlayColor;
#endif

const float AMBIENT = 0.45;

const float XFAC = -0.1;
const float ZFAC = 0.1;

float lightIntensity() {
#ifdef FANCY
    vec3 N = normalize( WORLD * NORMAL ).xyz;

    //take care of double sided polygons on materials without culling
#ifdef FLIP_BACKFACES
    vec3 viewDir = normalize((WORLD * POSITION).xyz);
    if( dot(N, viewDir) > 0.0 )
        N *= -1.0;
#endif

    float yLight = (1.0+N.y) * 0.5;
    return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
#else
    return 1.0;
#endif
}

void main()
{
    POS4 pos = WORLDVIEWPROJ * POSITION;
    gl_Position = pos;

    float L = lightIntensity();

#ifdef USE_OVERLAY
	L += OVERLAY_COLOR.a * 0.35;
    overlayColor = OVERLAY_COLOR;
#endif

    light = vec4(vec3(L) * TILE_LIGHT_COLOR, 1.0);

#ifdef COLOR_BASED
	light *= COLOR;
#else
    uv = TEXCOORD_0;
#endif

//fog
    fogColor.rgb = FOG_COLOR.rgb;
    fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
}